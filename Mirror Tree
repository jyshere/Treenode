#include <iostream>
using namespace std;


class TreeNode {
public:
    int data;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) {
        data = val;
        left = NULL;
        right = NULL;
    }
};


void inorder(TreeNode* root) {
    if (root == NULL)
        return;
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}


void mirror(TreeNode* root) {
    if (root == NULL)
        return;

  
    TreeNode* temp = root->left;
    root->left = root->right;
    root->right = temp;

   
    mirror(root->left);
    mirror(root->right);
}

int main() {
   

    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->right = new TreeNode(6);

    cout << "Inorder before mirroring: ";
    inorder(root);
    cout << endl;

    mirror(root);

    cout << "Inorder after mirroring: ";
    inorder(root);
    cout << endl;

    return 0;
}
